// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/korovindenis/shutdown-from-browser/v2/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// storage is an autogenerated mock type for the storage type
type storage struct {
	mock.Mock
}

// GetModePoff provides a mock function with given fields:
func (_m *storage) GetModePoff() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimePoff provides a mock function with given fields:
func (_m *storage) GetTimePoff() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPoff provides a mock function with given fields: pc
func (_m *storage) SetPoff(pc entity.MyPc) error {
	ret := _m.Called(pc)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.MyPc) error); ok {
		r0 = rf(pc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newStorage creates a new instance of storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *storage {
	mock := &storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
